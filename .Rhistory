matplot(returnIntercept)
matplot(returnIntercept, type="l")
kneefdMean <- mean(EquityReturnsMatfd)
kneefdMean <- mean(EquityReturnsMatfd$fd)
View(EquityReturnsMat)
View(EquityReturnsMatfd)
kneefdMean <- mean(EquityReturnsMatfd)
kneefdMean <- EquityReturnsMatfd[,43]
kneeMean = predict(kneefdMean, seq(0,26,len=50))
plot(kneeMean)
plot(kneeMean, type="l")
?predict
kneefdMean <- EtherPricesMat[,43]
kneeMean = predict(kneefdMean, seq(0,26,len=50))
kneefdMean <- EtherPricesMat[,43]
matplot(EtherPricesMatfd)
equity_returns_matrix_name = "2020_SPY_returns_2020-08-03_2020-09-30_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-08-03_2020-09-30_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-08-03_2020-09-30_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", ethereum_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EtherPricesMat = as.matrix(returns_matrix)
# equity returns
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(ReturnsBasis, lambda=0.0001)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, EquityReturnsMat, D2fdPar)$fd
plotfit.fd(EquityReturnsMat, ReturnsDayTime, EquityReturnsMatfd)
# ether prices
EtherDayTime = 0:26;
EtherDayRng = c(0,26);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=27, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
matplot(EtherPricesMatfd)
plot(EtherPricesMatfd)
create.constant.basis
?create.constant.basis
?create.basis
?smooth.basis
?fd
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayTime, names="const")
D2fdPar = fdPar(WheatBasis, lambda=0.001)
WheatPricesMatfd = smooth.basis(WheatBasis, WheatPricesMat, D2fdPar)$fd
WheatPricesMatfd = smooth.basis(WheatBasis, WheatPricesMat, D2fdPar)$fd
WheatPricesMatfd = fd(WheatBasis, WheatPricesMat, D2fdPar)$fd
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)$fd
plot(WheatPricesMatfd)
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)$fd
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayTime, names="const")
D2fdPar = fdPar(WheatBasis, lambda=0.001)
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)$fd
View(WheatPricesMat)
View(WheatPricesMat)
View(WheatPricesMatfd)
plot(WheatPricesMat)
matplot(WheatPricesMat, type="l")
View(WheatPricesMatfd)
View(WheatPricesMat)
library(fda)
equity_returns_matrix_name = "2020_SPY_returns_2020-08-03_2020-09-30_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-08-03_2020-09-30_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-08-03_2020-09-30_matrix"
equity_returns_matrix_name = "2020_SPY_returns_2020-08-03_2020-09-30_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-08-03_2020-09-30_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-08-03_2020-09-30_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", ethereum_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EtherPricesMat = as.matrix(returns_matrix)
# equity returns
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(ReturnsBasis, lambda=0.0001)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, EquityReturnsMat, D2fdPar)$fd
# ether prices
EtherDayTime = 0:26;
EtherDayRng = c(0,26);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=27, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayTime, names="const")
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)$fd
View(WheatPricesMatfd)
View(WheatBasis)
WheatBasis = create.monomial.basis(WheatDayTime, nbasis = 1)
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)$fd
View(WheatPricesMatfd)
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.monomial.basis(WheatDayTime, nbasis = 1)
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)$fd
View(WheatPricesMatfd)
WheatPricesMatfd[["reps"]]
WheatPricesMatfd = fd(coefWheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = fd(coef=WheatPricesMat, WheatBasis)$fd
View(WheatPricesMatfd)
WheatBasis = create.bspline.basis(WheatDayTime, nbasis = 1)
WheatBasis = create.bspline.basis(WheatDayTime, nbasis = 1, norder=1)
WheatPricesMatfd = fd(coef=WheatPricesMat, WheatBasis)$fd
View(WheatPricesMatfd)
WheatBasis = create.bspline.basis(WheatDayTime, nbasis = 1, norder=1)
WheatPricesMatfd = Data2fd(WheatPricesMat, WheatBasis)$fd
WheatBasis = create.constant.basis(WheatDayTime)
WheatPricesMatfd = Data2fd(WheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = Data2fd(c(1:43),WheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = Data2fd(c(0:1), WheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = Data2fd(c(0:0), WheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = Data2fd(c(1:1), WheatPricesMat, WheatBasis)$fd
# wheat prices
WheatDayTime = 0:0;
WheatDayRng = c(0,0);
WheatBasis = create.constant.basis(WheatDayTime)
# wheat prices
WheatDayTime = 1:1;
WheatDayRng = c(0,0);
WheatBasis = create.constant.basis(WheatDayTime)
WheatPricesMatfd = Data2fd(c(1:1), WheatPricesMat, WheatBasis)$fd
c(9,5)
WheatPricesMatfd = Data2fd(c(1), WheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = Data2fd(c(1:43), WheatPricesMat, WheatBasis)$fd
WheatPricesMatfd = Data2fd(c(1), WheatPricesMat, WheatBasis)$fd
WheatBasis = create.bspline.basis(WheatDayTime)
WheatPricesMatfd = Data2fd(c(1), WheatPricesMat, WheatBasis)$fd
# wheat prices
WheatDayTime = 0:0;
WheatDayRng = c(0,0);
WheatBasis = create.bspline.basis(WheatDayRng, nbasis=1, norder = 1)
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.bspline.basis(WheatDayRng, nbasis=1, norder = 1)
D2fdPar = fdPar(WheatBasis, lambda=0.01)
WheatPricesMatfd = smooth.basis(WheatDayTime, WheatPricesMat, D2fdPar)$fd
WheatPricesMatfd = smooth.basis(WheatDayTime, WheatPricesMat, D2fdPar)$fd
# wheat prices
WheatDayTime = 0:0;
WheatDayRng = c(0,1);
WheatBasis = create.bspline.basis(WheatDayRng, nbasis=1, norder = 1)
D2fdPar = fdPar(WheatBasis, lambda=0.01)
WheatPricesMatfd = smooth.basis(WheatDayTime, WheatPricesMat, D2fdPar)$fd
WheatPricesMatfd
matrix(0,65,1)
# wheat prices
WheatDayTime = 0:0;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayRng)
D2fdPar = fdPar(WheatBasis, lambda=0.01)
WheatPricesMatfd = smooth.basis(WheatDayTime, WheatPricesMat, D2fdPar)$fd
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayRng)
D2fdPar = fdPar(WheatBasis, lambda=0.01)
WheatPricesMatfd = smooth.basis(WheatDayTime, WheatPricesMat, D2fdPar)$fd
# wheat prices
WheatDayTime = 1:1;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayRng)
D2fdPar = fdPar(WheatBasis, lambda=0.01)
WheatPricesMatfd = smooth.basis(WheatDayTime, WheatPricesMat, D2fdPar)$fd
WheatBasis = create.constant.basis(WheatDayRng)
WheatPricesMatfd = fd(coef=c(1:10), WheatBasis)
WheatBasis = create.constant.basis(WheatDayRng)
WheatPricesMatfd = fd(coef=[[1,1][2,2]], WheatBasis)
WheatDayRng = c(0,0);
WheatBasis = create.constant.basis(WheatDayRng)
WheatDayRng = c(1,1);
WheatBasis = create.constant.basis(WheatDayRng)
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayRng)
test_mat = matrix(c(1,2,3,4,5,6), nrow=2, ncol =3)
WheatPricesMatfd = fd(coef=test_mat, WheatBasis)
test_mat = matrix(c(1,2,3,4,5,6), nrow=2, ncol =3)
WheatPricesMatfd = fd(coef=test_mat, WheatBasis)
# wheat prices
WheatDayTime = 0:1;
WheatDayRng = c(0,1);
WheatBasis = create.constant.basis(WheatDayRng)
test_mat = matrix(c(1,2,3,4,5,6), nrow=2, ncol =3)
WheatPricesMatfd = fd(coef=test_mat, WheatBasis)
test_mat = matrix(c(1,2,3,4,5,6), nrow=3, ncol =2)
WheatPricesMatfd = fd(coef=test_mat, WheatBasis)
# wheat prices
WheatBasis = create.constant.basis()
WheatPricesMatfd = fd(coef=c(1), WheatBasis)
View(WheatPricesMatfd)
# wheat prices
WheatBasis = create.constant.basis()
test_mat = matrix(c(1,2,3,4,5,6), nrow=3, ncol =2)
WheatPricesMatfd = Data2fd(coef=c(1), WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(0:0), coef=c(1), WheatBasis)
# wheat prices
WheatBasis = create.constant.basis()
WheatPricesMatfd = Data2fd(argvals=c(0:0), y=c(1), WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(0:0), y=WheatPricesMat, WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(0:42), y=WheatPricesMat, WheatBasis)
# wheat prices
WheatBasis = create.constant.basis()
WheatPricesMatfd = Data2fd(argvals=c(0:0), y=WheatPricesMat, WheatBasis)
dim(WheatPricesMatfd)
dim(WheatPricesMat)
WheatPricesMatfd = Data2fd(argvals=c(1,43), y=WheatPricesMat, WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(43), y=WheatPricesMat, WheatBasis)
# wheat prices
WheatBasis = create.constant.basis()
WheatPricesMatfd = Data2fd(argvals=c(43), y=WheatPricesMat, WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(1), y=WheatPricesMat, WheatBasis)
test_mat = matrix(c(1,2,3,4,5,6), nrow=3, ncol =2)
test_mat = matrix(c(1,2,3,4,5,6), nrow=2, ncol =3)
WheatPricesMatfd = Data2fd(argvals=c(2), y=test_mat, WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(1:2), y=test_mat, WheatBasis)
WheatPricesMatfd = Data2fd(argvals=c(0:1), y=test_mat, WheatBasis)
View(WheatPricesMat)
# wheat prices
WheatBasis = create.constant.basis(c(0,1))
# wheat prices
WheatBasis = create.constant.basis(c(0,1))
test_mat = matrix(c(1,2,3,4,5,6), nrow=2, ncol =3)
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)
View(WheatPricesMatfd)
plot(WheatPricesMatfd)
# wheat prices
WheatBasis = create.constant.basis(c(0,1))
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)
plot(WheatPricesMatfd)
# wheat prices
WheatBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)
plot(WheatPricesMatfd)
# ether prices
EtherDayTime = 0:39;
EtherDayRng = c(0,26);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=27, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
plotfit.fd(EtherPricesMat, EtherDayTime, EtherPricesMatfd)
# ether prices
EtherDayTime = 0:26;
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=27, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
0:26
View(EtherPricesMat)
?seq
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 2.6667);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=27, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 40/15);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 40/27);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# wheat prices
WheatBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)
plot(WheatPricesMatfd)
xfdlist   = list(const=rep(1,43), eth=EtherPricesMatfd)
betafdPar = fdPar(EtherPricesMatfd)
betalist  = list(const=betafdPar, eth=EtherPricesMatfd)
fRegressList= fRegress(EtherPricesMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,len=50))
matplot(returnIntercept, type="l")
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
View(returnIntercept)
View(fRegressList)
# prediction
eth_test <- EtherPricesMatfd[,10]
b1_test <- fRegressList$betaestlist$eth
View(b1_test)
eth_test*b1_test + returnIntercept
eth_test*b1_test
?eval.fd
b1eval <- eval.fd(c(0:39), b1_test)
View(b1_test)
b1_test <- fRegressList$betaestlist$eth$fd
b1eval <- eval.fd(c(0:39), b1_test)
eth_test*b1_test
eth_test%*%b1_test
eth_test
# prediction
eth_test <- EtherPricesMat[,10]
eth_test
dim(eth_test)
dim(b1_test)
dim(b1eval)
# prediction
eth_test <- eval.fd(c(0:39, EtherPricesMatfd)
# prediction
eth_test <- eval.fd(c(0:39, EtherPricesMatfd)
# prediction
eth_test <- eval.fd(c(0:39), EtherPricesMatfd)
# prediction
eth_test <- eval.fd(c(0:39), EtherPricesMatfd)[,10]
b1_test <- fRegressList$betaestlist$eth$fd
b1eval <- eval.fd(c(0:39), b1_test)
dim(eth_test)
dim(eth_test)
dim(b1eval)
eth_test
b1_test
b1eval
eth_test%*%b1eval
b1eval %*% eth_test
EtherPricesMatfd[,10] * b1_test
EtherPricesMatfd[,10] * b1_test
mult_test <- EtherPricesMatfd[,10] * b1_test
curve <- betaestlist$const$fd + mult_test
plot(curve)
View(curve)
plotfd(curve)
matplot(curve)
plot(curve)
View(mult_test)
mult_test <- EtherPricesMatfd[,10] * fRegressList$betaestlist$eth$fd
curve <- betaestlist$const$fd + mult_test
plot(curve)
plot(curve[,10])
plot(curve[,10])
plot(curve[,10])
mult_test <- EtherPricesMatfd * fRegressList$betaestlist$eth$fd
curve <- betaestlist$const$fd + mult_test
plot(curve[,10])
View(curve)
returnIntercept = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
equity_returns_matrix_name = "2020_SPY_returns_2020-08-03_2020-09-30_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-08-03_2020-09-30_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-08-03_2020-09-30_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", ethereum_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EtherPricesMat = as.matrix(returns_matrix)
# equity returns (10 min intervals)
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(ReturnsBasis, lambda=0.0001)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, EquityReturnsMat, D2fdPar)$fd
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 40/27);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(EtherBasis, lambda=0.001)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# wheat prices
WheatBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)
plot(WheatPricesMatfd)
xfdlist   = list(const=rep(1,43), eth=EtherPricesMatfd)
betafdPar = fdPar(EtherPricesMatfd)
betalist  = list(const=betafdPar, eth=EtherPricesMatfd)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
returnIntercept = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
# prediction
eth_test <- eval.fd(c(0:39), EtherPricesMatfd)[,10]
b1_test <- fRegressList$betaestlist$eth$fd
b1eval <- eval.fd(c(0:39), b1_test)
dim(eth_test)
dim(b1eval)
eth_test * b1eval
mult_test <- EtherPricesMatfd * fRegressList$betaestlist$eth$fd
curve <- betaestlist$const$fd + mult_test
plot(curve[,10])
library("ftsa")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
colnames(returns_matrix) <- c(1:19)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
colnames(returns_matrix) <- c(1:19)
colnames(returns_matrix) <- c(1:40)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
f <- ftsm(fts_prices, order=4)
T_stationary(returns_matrix)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = TRUE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
# Plot the forecasts in rainbow color for Fig. 4(b)
plot(ftsmiterativeforecasts(fts_prices, components = 4, iteration = 20),
add = TRUE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
# Plot the forecasts in rainbow color for Fig. 4(b)
plot(ftsmiterativeforecasts(fts_prices, components = 4, iteration = 20))
View(f)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
returns_matrix = returns_matrix[,1:35]
colnames(returns_matrix) <- c(1:35)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
f <- ftsm(fts_prices, order=4)
T_stationary(returns_matrix)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
library("ftsa")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
returns_matrix_test = returns_matrix[,36:40]
returns_matrix = returns_matrix[,1:35]
colnames(returns_matrix) <- c(1:35)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
f <- ftsm(fts_prices, order=4)
T_stationary(returns_matrix)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
plot(returns_matrix_test[,1], add = FALSE)
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
plot(returns_matrix_test[,1], type="l", add = TRUE)
plot(forecast(ftsm(fts_prices, order=4), h = 4))
plot(returns_matrix_test[,1], type="l", add = TRUE)
plot(forecast(ftsm(fts_prices, order=4), h = 4))
par(new=TRUE)
plot(returns_matrix_test[,1], type="l")
plot(returns_matrix_test[,1], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4))
par(new=TRUE)
lines(returns_matrix_test[,1], type="l")
plot(returns_matrix_test[,1], type="l")
lines(forecast(ftsm(fts_prices, order=4), h = 4))
lines(forecast(ftsm(fts_prices, order=4), h = 4))
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(returns_matrix_test[,2], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
par(new=TRUE)
plot(returns_matrix_test[,3], type="l")
plot(returns_matrix_test[,3], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(returns_matrix_test[,4], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(returns_matrix_test[,5], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
