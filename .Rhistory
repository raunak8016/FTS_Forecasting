mult_test <- EtherPricesMatfd * fRegressList$betaestlist$eth$fd
curve <- betaestlist$const$fd + mult_test
plot(curve[,10])
library("ftsa")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
colnames(returns_matrix) <- c(1:19)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
colnames(returns_matrix) <- c(1:19)
colnames(returns_matrix) <- c(1:40)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
f <- ftsm(fts_prices, order=4)
T_stationary(returns_matrix)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = TRUE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
# Plot the forecasts in rainbow color for Fig. 4(b)
plot(ftsmiterativeforecasts(fts_prices, components = 4, iteration = 20),
add = TRUE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
# Plot the forecasts in rainbow color for Fig. 4(b)
plot(ftsmiterativeforecasts(fts_prices, components = 4, iteration = 20))
View(f)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
returns_matrix = returns_matrix[,1:35]
colnames(returns_matrix) <- c(1:35)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
f <- ftsm(fts_prices, order=4)
T_stationary(returns_matrix)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
legend("topright", c("20", "23"), col = c("red", "blue"), lty = 1)
library("ftsa")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
returns_matrix_test = returns_matrix[,36:40]
returns_matrix = returns_matrix[,1:35]
colnames(returns_matrix) <- c(1:35)
fts_prices <- fts(c(1:40), returns_matrix, xname="Time", yname="Return")
matplot(returns_matrix, type="l")
f <- ftsm(fts_prices, order=4)
T_stationary(returns_matrix)
plot(forecast(ftsm(fts_prices, order=4), h=4), "components")
plot(fts_prices, col = gray(0.8), xlab = "Time",
ylab = "Percentage Return",
main = "Forecasted return")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
plot(returns_matrix_test[,1], add = FALSE)
plot(forecast(ftsm(fts_prices, order=4), h = 4), add = FALSE)
plot(returns_matrix_test[,1], type="l", add = TRUE)
plot(forecast(ftsm(fts_prices, order=4), h = 4))
plot(returns_matrix_test[,1], type="l", add = TRUE)
plot(forecast(ftsm(fts_prices, order=4), h = 4))
par(new=TRUE)
plot(returns_matrix_test[,1], type="l")
plot(returns_matrix_test[,1], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4))
par(new=TRUE)
lines(returns_matrix_test[,1], type="l")
plot(returns_matrix_test[,1], type="l")
lines(forecast(ftsm(fts_prices, order=4), h = 4))
lines(forecast(ftsm(fts_prices, order=4), h = 4))
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(returns_matrix_test[,2], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
par(new=TRUE)
plot(returns_matrix_test[,3], type="l")
plot(returns_matrix_test[,3], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(returns_matrix_test[,4], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
plot(returns_matrix_test[,5], type="l")
plot(forecast(ftsm(fts_prices, order=4), h = 4), add=TRUE)
equity_returns_matrix_name = "2020_SPY_cidr_2020-06-15_2020-08-11_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-06-15_2020-08-11_matrix"
wheat_prices_matrix_name = "SUGAR_prices_2020-06-15_2020-08-11_matrix"
wheat_prices_matrix_name = "CORN_prices_2020-06-15_2020-08-11_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-06-15_2020-08-11_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
wheat_prices_matrix_name = "WHEAT_prices_2020-06-15_2020-08-11_matrix"
sugar_prices_matrix_name = "SUGAR_prices_2020-06-15_2020-08-11_matrix"
corn_prices_matrix_name = "CORN_prices_2020-06-15_2020-08-11_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-06-15_2020-08-11_matrix"
library(fda)
equity_returns_matrix_name = "2020_SPY_cidr_2020-06-15_2020-08-11_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-06-15_2020-08-11_matrix"
sugar_prices_matrix_name = "SUGAR_prices_2020-06-15_2020-08-11_matrix"
corn_prices_matrix_name = "CORN_prices_2020-06-15_2020-08-11_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-06-15_2020-08-11_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", ethereum_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EtherPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", sugar_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
SugarPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", corn_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
CornPricesMat = as.matrix(returns_matrix)
# split into train test sets
EquityReturnsMatTest = EquityReturnsMat[,36:40]
EquityReturnsMat = EquityReturnsMat[,1:35]
EtherPricesMatTest = EtherPricesMat[,36:40]
EtherPricesMat = EtherPricesMat[,1:35]
WheatPricesMatTest = t(matrix(WheatPricesMat[1,36:40]))
WheatPricesMat = t(matrix(WheatPricesMat[,1:35]))
# split into train test sets
EquityReturnsMatTest = EquityReturnsMat[,36:40]
EquityReturnsMat = EquityReturnsMat[,1:35]
EtherPricesMatTest = EtherPricesMat[,36:40]
EtherPricesMat = EtherPricesMat[,1:35]
WheatPricesMatTest = t(matrix(WheatPricesMat[1,36:40]))
WheatPricesMat = t(matrix(WheatPricesMat[,1:35]))
SugarPricesMatTest = t(matrix(SugarPricesMat[1,36:40]))
SugarPricesMat = t(matrix(SugarPricesMat[,1:35]))
CornPricesMatTest = t(matrix(CornPricesMat[1,36:40]))
CornPricesMat = t(matrix(CornPricesMat[,1:35]))
# equity returns (10 min intervals)
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(ReturnsBasis, lambda=0.8)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, EquityReturnsMat, D2fdPar)$fd
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 40/27);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=3)
D2fdPar = fdPar(EtherBasis, lambda=1)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# wheat prices
WheatBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, WheatBasis)
plot(WheatPricesMatfd)
# corn prices
CornPricesMatfd = fd(CornPricesMat, CommodityConstantBasis)
# wheat prices
CommodityConstantBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, CommodityConstantBasis)
plot(WheatPricesMatfd)
# corn prices
CornPricesMatfd = fd(CornPricesMat, CommodityConstantBasis)
plot(CornPricesMatfd)
# sugar prices
SugarPricesMatfd = fd(SugarPricesMat, CommodityConstantBasis)
plot(CornPricesMatfd)
# sugar prices
SugarPricesMatfd = fd(SugarPricesMat, CommodityConstantBasis)
plot(SugarPricesMatfd)
xfdlist   = list(const=rep(1,35), eth=EtherPricesMatfd, wheat=WheatPricesMatfd)
betafdPar1 = fdPar(EtherBasis)
betafdPar2 = fdPar(EtherBasis)
betalist  = list(const=betafdPar1, eth=betafdPar1, wheat=betafdPar2)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
returnBeta1 = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnBeta1, type="l")
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, WheatBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
xfdlist   = list(const=rep(1,35), eth=EtherPricesMatfd, wheat=WheatPricesMatfd, corn=CornPricesMatfd)
betafdPar1 = fdPar(EtherBasis)
betafdPar2 = fdPar(EtherBasis)
betalist  = list(const=betafdPar1, eth=betafdPar1, wheat=betafdPar2, corn=betafdPar2)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
returnBeta1 = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnBeta1, type="l")
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, WheatBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
matplot(EquityReturnsMatTest, type="l")
matplot(c, type="l")
matplot(EquityReturnsMatTest, type="l")
+ (CornPricesMatfd * fRegressList$betaestlist$corn$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, CommodityConstantBasis)
CornPricesMatTestfd = fd(CornPricesMatfd, CommodityConstantBasis)
CornPricesMatTestfd = fd(CornPricesMatTest, CommodityConstantBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatfd * fRegressList$betaestlist$corn$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatTestfd * fRegressList$betaestlist$corn$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
betafdPar1 = fdPar(ReturnsBasis)
betafdPar2 = fdPar(ReturnsBasis)
betalist  = list(const=betafdPar1, eth=betafdPar1, wheat=betafdPar2, corn=betafdPar2, )
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betalist  = list(const=betafdPar1, eth=betafdPar1, wheat=betafdPar2, corn=betafdPar2)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
returnBeta1 = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnBeta1, type="l")
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, CommodityConstantBasis)
CornPricesMatTestfd = fd(CornPricesMatTest, CommodityConstantBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
# mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatTestfd * fRegressList$betaestlist$corn$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
library(fda)
equity_returns_matrix_name = "2020_SPY_cidr_2020-06-15_2020-08-11_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-06-15_2020-08-11_matrix"
sugar_prices_matrix_name = "SUGAR_prices_2020-06-15_2020-08-11_matrix"
corn_prices_matrix_name = "CORN_prices_2020-06-15_2020-08-11_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-06-15_2020-08-11_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", ethereum_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EtherPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", sugar_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
SugarPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", corn_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
CornPricesMat = as.matrix(returns_matrix)
# split into train test sets
EquityReturnsMatTest = EquityReturnsMat[,36:40]
EquityReturnsMat = EquityReturnsMat[,1:35]
EtherPricesMatTest = EtherPricesMat[,36:40]
EtherPricesMat = EtherPricesMat[,1:35]
WheatPricesMatTest = t(matrix(WheatPricesMat[1,36:40]))
WheatPricesMat = t(matrix(WheatPricesMat[,1:35]))
SugarPricesMatTest = t(matrix(SugarPricesMat[1,36:40]))
SugarPricesMat = t(matrix(SugarPricesMat[,1:35]))
CornPricesMatTest = t(matrix(CornPricesMat[1,36:40]))
CornPricesMat = t(matrix(CornPricesMat[,1:35]))
# equity returns (10 min intervals)
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(ReturnsBasis, lambda=0.8)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, EquityReturnsMat, D2fdPar)$fd
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 40/27);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=3)
D2fdPar = fdPar(EtherBasis, lambda=1)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# wheat prices
CommodityConstantBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, CommodityConstantBasis)
plot(WheatPricesMatfd)
# corn prices
CornPricesMatfd = fd(CornPricesMat, CommodityConstantBasis)
plot(CornPricesMatfd)
# sugar prices
SugarPricesMatfd = fd(SugarPricesMat, CommodityConstantBasis)
plot(SugarPricesMatfd)
xfdlist   = list(const=rep(1,35), eth=EtherPricesMatfd, wheat=WheatPricesMatfd, corn=CornPricesMatfd, sugar=SugarPricesMatfd)
betafdPar = fdPar(ReturnsBasis)
betalist  = list(const=betafdPar1, eth=betafdPar, wheat=betafdPar, corn=betafdPar, sugar=betafdPar)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
betafdPar = fdPar(ReturnsBasis)
betalist  = list(const=betafdPar, eth=betafdPar, wheat=betafdPar, corn=betafdPar, sugar=betafdPar)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
returnBeta1 = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnBeta1, type="l")
matplot(returnIntercept, type="l")
matplot(returnBeta1, type="l")
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, CommodityConstantBasis)
CornPricesMatTestfd = fd(CornPricesMatTest, CommodityConstantBasis)
SugarPricesMatTestfd = fd(SugarPricesMatTest, CommodityConstantBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
# mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatTestfd * fRegressList$betaestlist$corn$fd) + (SugarPricesMatTestfd * fRegressList$betaestlist$sugar$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
matplot(EquityReturnsMatTest, type="l")
matplot(c, type="l")
matplot(c, type="l")
lines(EquityReturnsMatTest, type="l")
matplot(EquityReturnsMatTest, type="l")
matplot(c, type="l", add=TRUE)
mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatfd * fRegressList$betaestlist$corn$fd) + (SugarPricesMatfd * fRegressList$betaestlist$sugar$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l", add=TRUE)
matplot(c, type="l")
matplot(EquityReturnsMatTest, type="l")
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
matplot(EquityReturnsMatTest[,2:5], type="l")
matplot(c[,2:5], type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest[,2:5], type="l")
matplot(EquityReturnsMatTest[,2:5], type="l")
matplot(c[,2:5], type="l", add=TRUE)
matplot(c[,5:8], type="l", add=TRUE)
matplot(EquityReturnsMatTest[,5:8], type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest[,5:8], type="l")
matplot(EquityReturnsMat[,5:8], type="l")
matplot(c[,5:8], type="l", add=TRUE)
par(new=TRUE)
matplot(EquityReturnsMat[,5:8], type="l")
matplot(EquityReturnsMat[,5:8], type="l")
matplot(c[,5:8], type="l", add=TRUE)
matplot(EquityReturnsMat[,9:12], type="l")
matplot(c[,9:12], type="l", add=TRUE)
matplot(c[,9:12], type="l", add=TRUE)
par(new=TRUE)
matplot(c[,9:12], type="l", add=TRUE)
matplot(c[,9:12], type="l")
matplot(c[], type="l")
matplot(c, type="l")
returnBeta1 = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnBeta1, type="l")
matplot(returnIntercept, type="l")
returnBeta2 = predict(fRegressList$betaestlist$wheat$fd, seq(0,39,1))
matplot(returnBeta2, type="l")
# viewing fit
mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatfd * fRegressList$betaestlist$corn$fd) + (SugarPricesMatfd * fRegressList$betaestlist$sugar$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMat[,9:12], type="l")
matplot(EquityReturnsMat[,9:12], type="l")
matplot(c, type="l", add=TRUE)
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, CommodityConstantBasis)
CornPricesMatTestfd = fd(CornPricesMatTest, CommodityConstantBasis)
SugarPricesMatTestfd = fd(SugarPricesMatTest, CommodityConstantBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
# mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatTestfd * fRegressList$betaestlist$corn$fd) + (SugarPricesMatTestfd * fRegressList$betaestlist$sugar$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(c, type="l")
par(new=TRUE)
matplot(EquityReturnsMatTest, type="l")
matplot(EquityReturnsMatTest, type="l")
matplot(c, type="l", add=TRUE)
library(fda)
equity_returns_matrix_name = "2020_SPY_cidr_2020-06-15_2020-08-11_matrix"
wheat_prices_matrix_name = "WHEAT_prices_2020-06-15_2020-08-11_matrix"
sugar_prices_matrix_name = "SUGAR_prices_2020-06-15_2020-08-11_matrix"
corn_prices_matrix_name = "CORN_prices_2020-06-15_2020-08-11_matrix"
ethereum_prices_matrix_name = "Ether_prices_2020-06-15_2020-08-11_matrix"
# data processing
mat =load(paste("ProcessedRData/", equity_returns_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EquityReturnsMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", wheat_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
WheatPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", ethereum_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
EtherPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", sugar_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
SugarPricesMat = as.matrix(returns_matrix)
mat =load(paste("ProcessedRData/", corn_prices_matrix_name, ".RData", sep=""))
mat=as.matrix(returns_matrix)
CornPricesMat = as.matrix(returns_matrix)
# split into train test sets
EquityReturnsMatTest = EquityReturnsMat[,36:40]
EquityReturnsMat = EquityReturnsMat[,1:35]
EtherPricesMatTest = EtherPricesMat[,36:40]
EtherPricesMat = EtherPricesMat[,1:35]
WheatPricesMatTest = t(matrix(WheatPricesMat[1,36:40]))
WheatPricesMat = t(matrix(WheatPricesMat[,1:35]))
SugarPricesMatTest = t(matrix(SugarPricesMat[1,36:40]))
SugarPricesMat = t(matrix(SugarPricesMat[,1:35]))
CornPricesMatTest = t(matrix(CornPricesMat[1,36:40]))
CornPricesMat = t(matrix(CornPricesMat[,1:35]))
# equity returns (10 min intervals)
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis=40, norder=4)
D2fdPar = fdPar(ReturnsBasis, lambda=0.8)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, EquityReturnsMat, D2fdPar)$fd
# ether prices (15 min intervals)
EtherDayTime = seq(0,39, 40/27);
EtherDayRng = c(0,39);
EtherBasis = create.bspline.basis(EtherDayRng, nbasis=40, norder=3)
D2fdPar = fdPar(EtherBasis, lambda=1)
EtherPricesMatfd = smooth.basis(EtherDayTime, EtherPricesMat, D2fdPar)$fd
plot(EtherPricesMatfd)
# wheat prices
CommodityConstantBasis = create.constant.basis(c(0,39))
WheatPricesMatfd = fd(WheatPricesMat, CommodityConstantBasis)
plot(WheatPricesMatfd)
# corn prices
CornPricesMatfd = fd(CornPricesMat, CommodityConstantBasis)
plot(CornPricesMatfd)
# sugar prices
SugarPricesMatfd = fd(SugarPricesMat, CommodityConstantBasis)
plot(SugarPricesMatfd)
xfdlist   = list(const=rep(1,35), eth=EtherPricesMatfd, wheat=WheatPricesMatfd, corn=CornPricesMatfd, sugar=SugarPricesMatfd)
betafdPar = fdPar(ReturnsBasis)
betalist  = list(const=betafdPar, eth=betafdPar, wheat=betafdPar, corn=betafdPar, sugar=betafdPar)
fRegressList= fRegress(EquityReturnsMatfd, xfdlist, betalist)
betaestlist = fRegressList$betaestlist
returnIntercept = predict(betaestlist$const$fd, seq(0,39,1))
matplot(returnIntercept, type="l")
returnBeta1 = predict(fRegressList$betaestlist$eth$fd, seq(0,39,1))
matplot(returnBeta1, type="l")
returnBeta2 = predict(fRegressList$betaestlist$wheat$fd, seq(0,39,1))
matplot(returnBeta2, type="l")
# viewing fit
mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatfd * fRegressList$betaestlist$corn$fd) + (SugarPricesMatfd * fRegressList$betaestlist$sugar$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(EquityReturnsMat[,9:12], type="l")
matplot(c, type="l", add=TRUE)
# create fd objects for test data
EtherPricesMatTestfd = smooth.basis(EtherDayTime, EtherPricesMatTest, D2fdPar)$fd
WheatPricesMatTestfd = fd(WheatPricesMatTest, CommodityConstantBasis)
CornPricesMatTestfd = fd(CornPricesMatTest, CommodityConstantBasis)
SugarPricesMatTestfd = fd(SugarPricesMatTest, CommodityConstantBasis)
# mult_test <- (EtherPricesMatfd[,n] * fRegressList$betaestlist$eth$fd) + (WheatPricesMatfd[,n] * fRegressList$betaestlist$wheat$fd)
# mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd)
mult_test <- (EtherPricesMatTestfd * fRegressList$betaestlist$eth$fd) + (WheatPricesMatTestfd * fRegressList$betaestlist$wheat$fd) + (CornPricesMatTestfd * fRegressList$betaestlist$corn$fd) + (SugarPricesMatTestfd * fRegressList$betaestlist$sugar$fd)
# mult_test <- (EtherPricesMatfd * fRegressList$betaestlist$eth$fd)
curve <- betaestlist$const$fd + mult_test
c = eval.fd(seq(0, 39, 1), curve)
matplot(EquityReturnsMatTest, type="l")
matplot(c, type="l", add=TRUE)
