mat=load("/Users/raunaksandhu/Desktop/UNI/4th YR/Winter/MATH 518/RCode/Testing/Sweden.Rdata")
mat=as.matrix(SwedeMat)
matplot(mat,type="l")
SwedeMat = mat
dim(SwedeMat)
SwedeLogHazard = as.matrix(SwedeMat)
dimnames(SwedeLogHazard)[[2]] <- paste('b', 1751:1894, sep='')
library("ftsa")
library("rainbow")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
matplot(returns_matrix, type="l")
first_difference_matrix = matrix(nrow=40,ncol=ncol(returns_matrix)-1)
for (i in 1:ncol(first_difference_matrix)) {
first_difference_matrix[,i] = returns_matrix[,i+1] - returns_matrix[,i]
}
matplot(first_difference_matrix, type="l")
returns_matrix = first_difference_matrix
returns_matrix_test = returns_matrix[,36:39]
returns_matrix = returns_matrix[,1:35]
matplot(returns_matrix, type="l")
nbasis = 40
norder = 4
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis, norder)
D2fdPar = fdPar(ReturnsBasis, lambda=0.8)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, returns_matrix, D2fdPar)$fd
returns_matrix = eval.fd(c(0:39), EquityReturnsMatfd)
matplot(returns_matrix, type="l")
library("fda")
library("ftsa")
library("rainbow")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
matplot(returns_matrix, type="l")
first_difference_matrix = matrix(nrow=40,ncol=ncol(returns_matrix)-1)
setwd("/Users/raunaksandhu/Desktop/UNI/4th YR/Winter/MATH 518/FTS_Forecasting")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
matplot(returns_matrix, type="l")
first_difference_matrix = matrix(nrow=40,ncol=ncol(returns_matrix)-1)
for (i in 1:ncol(first_difference_matrix)) {
first_difference_matrix[,i] = returns_matrix[,i+1] - returns_matrix[,i]
}
matplot(first_difference_matrix, type="l")
returns_matrix = first_difference_matrix
returns_matrix_test = returns_matrix[,36:39]
returns_matrix = returns_matrix[,1:35]
matplot(returns_matrix, type="l")
nbasis = 40
norder = 4
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis, norder)
D2fdPar = fdPar(ReturnsBasis, lambda=0.8)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, returns_matrix, D2fdPar)$fd
returns_matrix = eval.fd(c(0:39), EquityReturnsMatfd)
matplot(returns_matrix, type="l")
EquityReturnsMatTestfd = smooth.basis(ReturnsDayTime, returns_matrix_test, D2fdPar)$fd
returns_matrix_test = eval.fd(c(0:39), EquityReturnsMatTestfd)
matplot(returns_matrix_test, type="l")
colnames(returns_matrix) <- c(1:35)
fts_returns = fts(c(1:40), returns_matrix, xname="Time", yname="Return")
fit = ftsm(y = fts_returns)
forecast = forecast(fit,h=5)
pred = forecast$mean$y
# plotting fit
temp = fit$coeff %*% t(fit$basis)
plot(temp[1,],type='l')
lines(returns_matrix[,1], col='red')
plot(temp[3,],type='l')
lines(returns_matrix[,3],col='red')
# plotting pred
quartz()
par( mfrow= c(3,2) )
for (i in 1:ncol(returns_matrix_test)) {
plot(returns_matrix_test[,i],type='l', ylim=c(-1.5,1.5))
lines(pred[,i], col='red')
lines(forecast$lower$y[,i], col = 3); lines(forecast$upper$y[,i], col = 3)
}
plot(pred[,i])
dev.off()
plot(pred[,i])
View(fit)
View(first_difference_matrix)
matplot(returns_matrix_test, type="l")
mat =load("ProcessedRData/2020_SPY_cidr_2020-06-15_2020-08-11_matrix.RData")
mat =as.matrix(returns_matrix)
matplot(returns_matrix, type="l")
first_difference_matrix = matrix(nrow=40,ncol=ncol(returns_matrix)-2)
for (i in 1:ncol(first_difference_matrix)) {
first_difference_matrix[,i] = returns_matrix[,i+2] - returns_matrix[,i]
}
matplot(first_difference_matrix, type="l")
returns_matrix = first_difference_matrix
returns_matrix_test = returns_matrix[,36:39]
returns_matrix = returns_matrix[,1:35]
returns_matrix_test = returns_matrix[,36:38]
returns_matrix = first_difference_matrix
returns_matrix_test = returns_matrix[,36:38]
returns_matrix = returns_matrix[,1:35]
matplot(returns_matrix, type="l")
matplot(returns_matrix_test, type="l")
nbasis = 40
norder = 4
ReturnsDayTime = 0:39;
ReturnsDayRng = c(0,39);
ReturnsBasis = create.bspline.basis(ReturnsDayRng, nbasis, norder)
D2fdPar = fdPar(ReturnsBasis, lambda=0.8)
EquityReturnsMatfd = smooth.basis(ReturnsDayTime, returns_matrix, D2fdPar)$fd
returns_matrix = eval.fd(c(0:39), EquityReturnsMatfd)
matplot(returns_matrix, type="l")
EquityReturnsMatTestfd = smooth.basis(ReturnsDayTime, returns_matrix_test, D2fdPar)$fd
returns_matrix_test = eval.fd(c(0:39), EquityReturnsMatTestfd)
matplot(returns_matrix_test, type="l")
colnames(returns_matrix) <- c(1:35)
fts_returns = fts(c(1:40), returns_matrix, xname="Time", yname="Return")
fit = ftsm(y = fts_returns)
forecast = forecast(fit,h=5)
pred = forecast$mean$y
# plotting fit
temp = fit$coeff %*% t(fit$basis)
plot(temp[1,],type='l')
lines(returns_matrix[,1], col='red')
plot(temp[3,],type='l')
lines(returns_matrix[,3],col='red')
# plotting pred
quartz()
par( mfrow= c(3,2) )
for (i in 1:ncol(returns_matrix_test)) {
plot(returns_matrix_test[,i],type='l', ylim=c(-1.5,1.5))
lines(pred[,i], col='red')
lines(forecast$lower$y[,i], col = 3); lines(forecast$upper$y[,i], col = 3)
}
